<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：WebDev | { vampirefan's   Harbor }]]></title>
  <link href="http://vampirefan.github.com/blog/categories/webdev/atom.xml" rel="self"/>
  <link href="http://vampirefan.github.com/"/>
  <updated>2013-04-29T14:01:42+08:00</updated>
  <id>http://vampirefan.github.com/</id>
  <author>
    <name><![CDATA[vampirefan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用浏览器做Presentation]]></title>
    <link href="http://vampirefan.github.com/blog/2012/10/20/presentation-with-browser/"/>
    <updated>2012-10-20T10:21:00+08:00</updated>
    <id>http://vampirefan.github.com/blog/2012/10/20/presentation-with-browser</id>
    <content type="html"><![CDATA[<p>终于找到<code>markdown</code>写<code>Presentation</code>的<a href="http://slideshow.rubyforge.org/index.html">方法</a>了。很理想，很强大，正是我一直想实现的功能。先前找到的<a href="http://imakewebthings.com/deck.js/">deck.js</a>和<a href="http://bartaz.github.com/impress.js">impress.js</a>被做成模板集成在<code>slideshow</code>这个<code>ruby gem</code>里面了。分别可以在<a href="http://geraldb.github.com/slideshow-deck.js/">slideshow-deck.js</a>和<a href="http://geraldb.github.com/slideshow-impress.js/">slideshow-impress.js</a>找到。</p>

<!--more-->

<p><code>deck.js</code>和<code>impress.js</code>的效果是不用说了。<code>impress.js</code>是借用了<a href="http://prezi.com/">prezi</a>的思想，把<code>presentation</code>做在一张无限延展的画布上，通过画布上一个个局部的<code>slide</code>间的动画转接，完成整个演示过程，比传统的<code>PowerPoint</code>更能抓住观众。</p>

<p><code>gem slideshow</code>的实现效果可以参见<a href="/slides/impress.js.html">slideshow-impress.js demo</a>和<a href="/slides/deck.js.html">slideshow-deck.js demo</a>。</p>

<p>我仍然觉得移动互联网的发展是不可限量的。浏览器能实现的功能远不止替代<code>ppt</code>这么简单。当云概念慢慢清晰在人们的生活中以后，谈了很多年却并没有真正融入生活和生产的物联网必将依靠着云的力量重新进入人们的视线。</p>

<p>最近经常为了很多想实现的功能和应用在网上搜寻各种互联网上的技术，越来越觉得有太多的新技术，新方法，真是学无止境啊。</p>

<p>今天一德国回来的CS的同学告诉我他在那里做的一个网站项目用的是<code>Grails</code>，<a href="http://grails.org/"><code>Groovy &amp; Rails</code></a>，看上去很不错，可以学学！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dart语言简介(翻译)]]></title>
    <link href="http://vampirefan.github.com/blog/2012/09/26/you-lan-dartyu-yan-fan-yi/"/>
    <updated>2012-09-26T21:07:00+08:00</updated>
    <id>http://vampirefan.github.com/blog/2012/09/26/you-lan-dartyu-yan-fan-yi</id>
    <content type="html"><![CDATA[<h2 id="section">前面的话</h2>

<p>一直对网站建设和前端设计都有一些兴趣，可是发现水还是很深的，从语言到框架，花样繁多，技术路线也是各色各样，玩了好久了，发现自己还是没有入门的感觉。找不着一个切入点，也不知道怎么搭建一个理想的完全受自己掌控且功能全面，简洁大方的系统。</p>

<p>Dart提出不久，从理念上来说还是比较切入我的心理的。不论以后Dart语言的发展如何，我都决定花一些精力来学习和使用这样一个新语言，新技术。希望我的技能可以随着它一起发展。</p>

<p>下面我从官方的资料开始边翻译边学习。
<!--more--></p>

<h2 id="dart">Dart语言简介(翻译)</h2>

<p>原文官网：<a href="http://www.dartlang.org/docs/language-tour/">A Tour of the Dart Language</a>     </p>

<p>参考网站：<a href="http://dart.lidian.info/wiki/Language_Tour#.E8.BF.90.E7.AE.97.E7.AC.A6">Dart 语言导览</a></p>

<p>欢迎使用Dart！我们将给你展示Dart语言的各个主要功能，从变量到操作符再到类和库，假设你已经知道用其他某些语言编写程序。</p>

<blockquote>
  <p>Tip:在Dart编辑器里新建一个服务应用工程来玩Dart的各个功能。请在<a href="http://www.dartlang.org/docs/editor/getting-started/">Getting Started with Dart Editor</a>找向导。</p>
</blockquote>

<p>也可以在<a href="http://www.dartlang.org/docs/spec/index.html">Dart Language Specification</a>中随时寻求更详细的帮助。</p>

<h2 id="0">0.目录</h2>

<ol>
  <li><a href="#1">一个基本的Dart程序(A basic Dart program)</a></li>
  <li><a href="#2">变量(Variables)</a></li>
  <li><a href="#3">内建类型(Built-in types)</a>
    <ul>
      <li><a href="#3.1">字符串(strings)</a></li>
      <li><a href="#3.2">数字(numbers)</a></li>
      <li><a href="#3.3">布尔(booleans)</a></li>
      <li><a href="#3.4">列表(lists, also known as arrays)</a></li>
      <li><a href="#3.5">映射(maps)</a></li>
    </ul>
  </li>
  <li><a href="#4">函数(Functions)</a></li>
  <li><a href="#5">操作符/运算符(Operators)</a>
    <ul>
      <li><a href="#5.1">算术运算符(arithmetic operators)</a></li>
      <li><a href="#5.2">相等性与关系运算符(equality and relational operators)</a></li>
      <li><a href="#5.3">赋值运算符(assignment operators)</a></li>
      <li><a href="#5.4">逻辑运算符(logical operators)</a></li>
      <li><a href="#5.5">位操作与移位运算符(bitwise and shift operators)</a></li>
      <li><a href="#5.6">其他运算符(other operators)</a></li>
      <li><a href="#5.7">运算符作为方法调用(operators as methods)</a></li>
    </ul>
  </li>
  <li><a href="#6">控制流(Control flow)</a>
    <ul>
      <li><a href="#6.1">If/else(If and else)</a></li>
      <li><a href="#6.2">For循环(For loops)</a></li>
      <li><a href="#6.3">While/do while(While and do while)</a></li>
      <li><a href="#6.4">Break/continue(Break and continue)</a></li>
      <li><a href="#6.5">Switch/case(Switch and case)</a></li>
      <li><a href="#6.6">Assert(Assert)</a></li>
    </ul>
  </li>
  <li><a href="#7">异常(Exceptions)</a></li>
  <li><a href="#8">类(Classes)</a></li>
  <li><a href="#9">接口(Classes)</a></li>
  <li><a href="#10">泛型(Generics)</a></li>
  <li><a href="#11">库和可访问性(Libraries and visibility)</a></li>
  <li><a href="#12">隔离(Isolates)</a></li>
  <li><a href="#13">类型定义(Typedefs)</a></li>
  <li><a href="#14">注释(Comments)</a></li>
</ol>

<h2 id="1">1.一个基本的Dart程序(A basic Dart program)</h2>

<p>这是一些使用Dart最基本功能的代码
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="c1">// Define a function.</span>
</span><span class='line'><span class="n">printNumber</span><span class="p">(</span><span class="kt">num</span> <span class="n">smallNumber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">assert</span><span class="p">(</span><span class="n">smallNumber</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="m">100</span><span class="p">);</span>            <span class="c1">// Check our assumptions.</span>
</span><span class='line'>  <span class="n">print</span><span class="p">(</span><span class="err">“</span><span class="n">The</span> <span class="kt">num</span><span class="n">ber</span> <span class="k">is</span> <span class="n">$smallNumber</span><span class="p">.</span><span class="err">”</span><span class="p">);</span> <span class="c1">// Print to the console.</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// This is where the app starts executing.</span>
</span><span class='line'><span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="kt">num</span><span class="n">ber</span> <span class="o">=</span> <span class="m">42</span><span class="p">;</span>           <span class="c1">// Declare and initialize a variable.</span>
</span><span class='line'>  <span class="n">printNumber</span><span class="p">(</span><span class="kt">num</span><span class="n">ber</span><span class="p">);</span>       <span class="c1">// Call a function.</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>下面是该程序中大部分Dart应用都能用到的部分：</p>

<p><strong>//</strong> <br />
注释；和其他语言相同。
    /* 注释多行 */</p>

<p><strong>num</strong> <br />
一种类型，一些其他的<a href="http://www.dartlang.org/docs/language-tour/#built-in-types">内建类型</a>有 Sting, int, bool.</p>

<p><strong>assert()</strong>  <br />
测试代码使用的<a href="http://www.dartlang.org/docs/language-tour/#assert">断言</a>的方法。</p>

<p><strong>100</strong> <br />
<a href="http://www.dartlang.org/docs/language-tour/#numbers">数值类型</a></p>

<p><strong>print()</strong> <br />
简单的输出</p>

<p><strong>”../”(或者’…’)</strong> <br />
<a href="http://www.dartlang.org/docs/language-tour/#strings">字符串类型</a></p>

<p><strong>$text</strong> <br />
字符串内插入变量的字符串值或toString()的返回值。</p>

<p><strong>main()</strong> <br />
应用开始执行时特别的，必需的顶级函数。</p>

<p><strong>var</strong> <br />
声明一个无特别类型的变量</p>

<h3 id="section-1">样式</h3>

<p>我们的代码遵循<a href="http://www.dartlang.org/articles/style-guide/">Dart Style Guide</a>中的约定。 譬如说，约定缩进长度为两个空格。</p>

<h3 id="section-2">运行时模式</h3>

<p>Dart程序可以运行在产品模式或测试模式。</p>

<p><em>产品模式(Production mode)</em>是Dart程序默认的运行模式， 基于速度优化。生产模式下，可选的静态类型声明会被忽略。</p>

<p><em>测试模式(Checked mode)</em>是适合开发者使用的模式， 可帮助你揪出运行过程中的一些类型错误。 例如，如果将非字符串数据赋值给声明为String类型的变量， 则会报告异常。</p>

<p>我们建议你在测试模式下开发与调试， 而在产品模式下部署。</p>

<p><a href="#0">回到目录</a></p>

<h2 id="2">2.变量(Variables)</h2>

<p>这是创建变量并给其赋值的例子：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">var</span> <span class="n">name</span> <span class="o">=</span> <span class="err">‘</span><span class="n">Bob</span><span class="err">’</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>变量及引用。名为<code>name</code>的变量包含对值为<code>"Bob"</code>的 String 对象的引用。</p>

<p><strong>默认值</strong>  <br />
未初始化的变量均有一初始值<code>null</code>。包括数字类型，属性均为对象。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kt">int</span> <span class="n">lineCount</span><span class="p">;</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">lineCount</span> <span class="o">==</span> <span class="kc">null</span><span class="p">);</span> <span class="c1">// Variables (even numbers) are initially null.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>可选类型</strong> <br />
你可以选择在变量声明语句中加上静态类型：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kt">String</span> <span class="n">name</span> <span class="o">=</span> <span class="err">‘</span><span class="n">Bob</span><span class="err">’</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>添加类型名称有助于清晰地表达你的意图。 编译器和编辑器等工具可以利用这些类型声明提供bug 预警与代码补全功能。</p>

<p><strong>final</strong> <br />
如果你不打算改变某个变量的值，可以使用<code>final</code>代替<code>var</code>，或者在类型名称前加上<code>final</code>关键字。<code>final</code>变量一旦赋值，便无法再更改。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">final</span> <span class="n">name</span> <span class="o">=</span> <span class="err">‘</span><span class="n">Bob</span><span class="err">’</span><span class="p">;</span> <span class="c1">// Or: final String name = ‘Bob’;</span>
</span><span class='line'><span class="n">name</span> <span class="o">=</span> <span class="err">‘</span><span class="n">Alice</span><span class="err">’</span><span class="p">;</span>     <span class="c1">// ERROR</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>总结</strong> <br />
尽管Dart中定义变量的类型并不是强制的，但我们通常推荐在声明变量时定义类型。 变量可以标记为<code>final</code>以锁定其值。未初始化的变量均有初始值<code>null</code>。</p>

<p><a href="#0">回到目录</a></p>

<h2 id="3">3.内建类型(Built-in types)</h2>

<p>Dart语言对以下类型提供特别支持：</p>

<ul>
  <li><a href="#3.1">字符串(strings)</a></li>
  <li><a href="#3.2">数字(numbers)</a></li>
  <li><a href="#3.3">布尔(booleans)</a></li>
  <li><a href="#3.4">列表(lists, also known as arrays)</a></li>
  <li><a href="#3.5">映射(maps)</a></li>
</ul>

<p>你可以使用常量初始化任一特殊类型对象。例如，’这是一个字符串’是字符串常量，而<code>true</code>是布尔型常量。</p>

<p>由于Dart中的所有变量均为对象（某类的一个实例） 你通常可以用构造函数创建变量。 对内置类型的变量也适用。 例如，你可以使用<code>Map()</code>构造函数创建映射，代码为<code>new Map()</code>。</p>

<p><a href="#0">回到目录</a></p>

<h3 id="3.1">字符串(strings)</h3>

<p>Dart中的字符串是一组<code>Unicode</code>字符代码的序列。 你可以使用单引号或双引号创建字符串：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">var</span> <span class="n">s1</span> <span class="o">=</span> <span class="err">‘</span><span class="n">Single</span> <span class="n">quotes</span> <span class="n">work</span> <span class="n">well</span> <span class="k">for</span> <span class="n">string</span> <span class="n">literals</span><span class="p">.</span><span class="err">’</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="n">s2</span> <span class="o">=</span> <span class="err">“</span><span class="n">Double</span> <span class="n">quotes</span> <span class="n">work</span> <span class="n">just</span> <span class="n">as</span> <span class="n">well</span><span class="p">.</span><span class="err">”</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="n">s3</span> <span class="o">=</span> <span class="err">‘</span><span class="n">It</span><span class="s1">&#39;s easy to escape the string delimiter.’;</span>
</span><span class='line'><span class="s1">var s4 = “It’s even easier to just use the other string delimiter.”;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>你可以使用<code>${expression}</code>在字符串中嵌入表达式数值。 如果表达式是变量名称，你可以省去<code>{}</code>。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">var</span> <span class="n">s</span> <span class="o">=</span> <span class="err">‘</span><span class="n">string</span> <span class="kt">int</span><span class="n">erpolation</span><span class="err">’</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">assert</span><span class="p">(</span><span class="err">‘</span><span class="n">Dart</span> <span class="n">has</span> <span class="n">$s</span><span class="p">,</span> <span class="n">which</span> <span class="k">is</span> <span class="n">very</span> <span class="n">handy</span><span class="p">.</span><span class="err">’</span> <span class="o">==</span>
</span><span class='line'>       <span class="err">‘</span><span class="n">Dart</span> <span class="n">has</span> <span class="n">string</span> <span class="kt">int</span><span class="n">erpolation</span><span class="p">,</span> <span class="n">which</span> <span class="k">is</span> <span class="n">very</span> <span class="n">handy</span><span class="p">.</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="err">‘</span><span class="n">That</span> <span class="n">deserves</span> <span class="n">all</span> <span class="n">caps</span><span class="p">.</span> <span class="n">$</span><span class="p">{</span><span class="n">s</span><span class="p">.</span><span class="n">toUpperCase</span><span class="p">()}</span> <span class="k">is</span> <span class="n">very</span> <span class="n">handy</span><span class="o">!</span><span class="err">’</span> <span class="o">==</span>
</span><span class='line'>       <span class="err">‘</span><span class="n">That</span> <span class="n">deserves</span> <span class="n">all</span> <span class="n">caps</span><span class="p">.</span> <span class="n">STRING</span> <span class="n">INTERPOLATION</span> <span class="k">is</span> <span class="n">very</span> <span class="n">handy</span><span class="o">!</span><span class="err">’</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote>
  <p>Tip:<code>==</code>运算符用以比较两个对象是否对等。在strings的例子里，它们如果具有相同的字符及顺序便是相等的。</p>
</blockquote>

<p>您可以将相邻的字符串常量连接为字符串：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">var</span> <span class="n">s</span> <span class="o">=</span> <span class="err">‘</span><span class="kt">String</span> <span class="err">‘‘</span><span class="n">concatenation</span><span class="err">’</span>
</span><span class='line'>        <span class="err">“</span> <span class="n">works</span> <span class="n">even</span> <span class="n">over</span> <span class="n">line</span> <span class="n">breaks</span><span class="p">.</span><span class="err">”</span><span class="p">;</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">s</span> <span class="o">==</span> <span class="err">‘</span><span class="kt">String</span> <span class="n">concatenation</span> <span class="n">works</span> <span class="n">even</span> <span class="n">over</span> <span class="n">line</span> <span class="n">breaks</span><span class="p">.</span><span class="err">’</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>另一种创建多行字符串的方法是使用三个引号，单双皆可。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">var</span> <span class="n">s1</span> <span class="o">=</span> <span class="err">‘’’</span>
</span><span class='line'><span class="n">You</span> <span class="n">can</span> <span class="n">create</span>
</span><span class='line'><span class="n">multi</span><span class="o">-</span><span class="n">line</span> <span class="n">strings</span> <span class="n">like</span> <span class="k">this</span> <span class="n">one</span><span class="p">.</span>
</span><span class='line'><span class="err">‘’’</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="n">s2</span> <span class="o">=</span> <span class="err">“</span><span class="s2">&quot;”This is also a</span>
</span><span class='line'><span class="s2">multi-line string.”””;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>你可以在字符串开头加上<code>@</code>创建“纯”字符串（即赋值时不转义）。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">var</span> <span class="n">s</span> <span class="o">=</span> <span class="err">@”</span><span class="n">In</span> <span class="n">a</span> <span class="n">raw</span> <span class="n">string</span><span class="p">,</span> <span class="n">even</span> <span class="err">\</span><span class="n">n</span> <span class="n">isn</span><span class="err">’</span><span class="n">t</span> <span class="n">special</span><span class="p">.</span><span class="err">”</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在字符串连接的方法下，你可以同时使用“纯”字符串和插入字符串方法来创建一个字符串。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">var</span> <span class="n">x</span> <span class="o">=</span> <span class="m">123</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="n">s</span> <span class="o">=</span> <span class="err">@’</span><span class="n">$x</span><span class="err">’</span> <span class="err">‘</span><span class="n">$x</span><span class="err">’</span> <span class="err">@’</span><span class="n">$x</span><span class="err">’</span><span class="p">;</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">s</span> <span class="o">==</span> <span class="err">@’</span><span class="n">$x123$x</span><span class="err">’</span><span class="p">);</span> <span class="c1">// The string has these characters: $x123$x</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>String方法</strong></p>

<p>所有字符串常量的类型均为<code>String</code>。<code>String</code>有一些实用方法，你可以通过它们确定一个字符串开始于、结束于或者是包含另一个字符串。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">var</span> <span class="n">fullName</span> <span class="o">=</span> <span class="err">‘</span><span class="n">Cuthbert</span> <span class="n">Musgrave</span> <span class="n">Girdlestone</span><span class="p">,</span> <span class="n">III</span><span class="err">’</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">assert</span><span class="p">(</span><span class="n">fullName</span><span class="p">.</span><span class="n">startsWith</span><span class="p">(</span><span class="err">‘</span><span class="n">Cuthbert</span><span class="err">’</span><span class="p">));</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">fullName</span><span class="p">.</span><span class="n">endsWith</span><span class="p">(</span><span class="err">‘</span><span class="n">III</span><span class="err">’</span><span class="p">));</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">fullName</span><span class="p">.</span><span class="n">contains</span><span class="p">(</span><span class="k">new</span> <span class="n">RegExp</span><span class="p">(</span><span class="err">‘</span><span class="n">Musgrave</span><span class="err">’</span><span class="p">)));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>字符串对象无法改变（immutable），即只能创建，但不能修改。 如果您仔细阅读<a href="http://api.dartlang.org/dart_core/String.html">String API docs</a>会发现，所有方法都不会 真正地改变<code>String</code>类型的状态。例如，<code>replaceAll()</code>方法只返回新的<code>String</code>对象，而没有改变原来的<code>String</code> 对象。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">var</span> <span class="n">greetingTemplate</span> <span class="o">=</span> <span class="err">‘</span><span class="n">Hello</span><span class="p">,</span> <span class="n">NAME</span><span class="o">!</span><span class="err">’</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="n">greeting</span> <span class="o">=</span> <span class="n">greetingTemplate</span><span class="p">.</span><span class="n">replaceAll</span><span class="p">(</span><span class="k">new</span> <span class="n">RegExp</span><span class="p">(</span><span class="err">“</span><span class="n">NAME</span><span class="err">”</span><span class="p">),</span> <span class="err">‘</span><span class="n">Bob</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">greeting</span> <span class="o">!=</span> <span class="n">greetingTemplate</span><span class="p">);</span> <span class="c1">// greetingTemplate didn’t change.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>可以在[string methods]找到更多的资料。</p>

<p><strong>SringBuffer方法</strong></p>

<p>要通过程序生成字符串，你可以使用<a href="http://api.dartlang.org/dart_core/StringBuffer.html">StringBuffer</a>。<code>StringBuffer</code>在调用<code>toString()</code>之前不会生成新的<code>String</code>对象。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">var</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">String</span><span class="n">Buffer</span><span class="p">();</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">sb</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="err">“</span><span class="n">Use</span> <span class="n">a</span> <span class="kt">String</span><span class="n">Buffer</span> <span class="err">“</span><span class="p">);</span>
</span><span class='line'><span class="n">sb</span><span class="p">.</span><span class="n">addAll</span><span class="p">([</span><span class="err">“</span><span class="k">for</span> <span class="err">“</span><span class="p">,</span> <span class="err">“</span><span class="n">efficient</span> <span class="err">“</span><span class="p">,</span> <span class="err">“</span><span class="n">string</span> <span class="err">“</span><span class="p">,</span> <span class="err">“</span><span class="n">creation</span> <span class="err">“</span><span class="p">]);</span>
</span><span class='line'><span class="n">sb</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="err">“</span><span class="k">if</span> <span class="n">you</span> <span class="n">are</span> <span class="err">“</span><span class="p">).</span><span class="n">add</span><span class="p">(</span><span class="err">“</span><span class="n">building</span> <span class="n">lots</span> <span class="n">of</span> <span class="n">strings</span><span class="p">.</span><span class="err">”</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="n">fullString</span> <span class="o">=</span> <span class="n">sb</span><span class="p">.</span><span class="n">toString</span><span class="p">();</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">assert</span><span class="p">(</span><span class="n">fullString</span> <span class="o">==</span>
</span><span class='line'>    <span class="err">‘</span><span class="n">Use</span> <span class="n">a</span> <span class="kt">String</span><span class="n">Buffer</span> <span class="k">for</span> <span class="n">efficient</span> <span class="n">string</span> <span class="n">creation</span> <span class="err">‘</span>
</span><span class='line'>    <span class="err">‘</span><span class="k">if</span> <span class="n">you</span> <span class="n">are</span> <span class="n">building</span> <span class="n">lots</span> <span class="n">of</span> <span class="n">strings</span><span class="p">.</span><span class="err">’</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">sb</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>  <span class="c1">// All gone!</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">sb</span><span class="p">.</span><span class="n">toString</span><span class="p">()</span> <span class="o">==</span> <span class="err">‘’</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote>
  <p>Tip:目前，编译成<code>JavaScript</code>后的StringBuffer`执行很慢。详情请见bug<a href="http://code.google.com/p/dart/issues/detail?id=1216">#1216</a>。</p>
</blockquote>

<p><a href="#0">回到目录</a></p>

<h3 id="3.2">数字(numbers)</h3>

<p>Dart中的数字分为两种：</p>

<p><a href="http://api.dartlang.org/dart_core/int.html">int</a>  <br />
任意大小的整数 <br />
<a href="http://api.dartlang.org/dart_core/double.html">double</a> <br />
十进制64位双精度浮点数，遵循<code>IEEE 754</code>规范所约定的格式</p>

<p><code>int</code>和<code>double</code>都是<a href="http://api.dartlang.org/dart_core/num.html">num</a>的子接口。<code>num</code> 接口定义了基本的运算符，如<code>+、-、/、*</code>，以及位运算符，如<code>&gt;&gt;</code>。</p>

<p><code>num</code>接口中还有<code>abs()</code>、<code>ceil()</code>、<code>floor()</code>等方法。如果<code>num</code>及其子接口中没有您需要的功能，<code>Math</code>类中可能会有所提供。</p>

<p>整数是没有小数点的数字。下面是一些定义整数常量的例子：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">var</span> <span class="n">x</span> <span class="o">=</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="n">hex</span> <span class="o">=</span> <span class="mh">0xDEADBEEF</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="n">bigInt</span> <span class="o">=</span> <span class="m">3465346583465243765923847659234765928347659567398475647495873984572947593470294387093493456870849216348723763945678236420938467345762304958724596873045876234572037862934765294365243652548673456705673465273465246734506873456729457623845623456234650457693475603768922346728346256</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote>
  <p>Tip:现阶段大整数在Dart和JavaScript中处理方式不同。</p>
</blockquote>

<p>如果数字含有小数点，则为双精度浮点数。 以下是一些定义双精度浮点数常量的例子：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">var</span> <span class="n">y</span> <span class="o">=</span> <span class="m">1.1</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="n">exponents</span> <span class="o">=</span> <span class="m">1.42e5</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>你可以通过下面的方法进行字符串和数字类型之间的相互转换：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'>#<span class="k">import</span><span class="p">(</span><span class="err">‘</span><span class="nl">dart:</span><span class="n">math</span><span class="err">’</span><span class="p">);</span> <span class="c1">// Needed for math functions. See libraries section&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// String -&amp;gt; int</span>
</span><span class='line'><span class="kd">var</span> <span class="n">one</span> <span class="o">=</span> <span class="n">parseInt</span><span class="p">(</span><span class="err">“</span><span class="m">1</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">one</span> <span class="o">==</span> <span class="m">1</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// String -&amp;gt; double</span>
</span><span class='line'><span class="kd">var</span> <span class="n">onePointOne</span> <span class="o">=</span> <span class="n">parseDouble</span><span class="p">(</span><span class="err">“</span><span class="m">1.1</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">onePointOne</span> <span class="o">==</span> <span class="m">1.1</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// int -&amp;gt; String</span>
</span><span class='line'><span class="kd">var</span> <span class="n">oneAsString</span> <span class="o">=</span> <span class="m">1.</span><span class="n">toString</span><span class="p">();</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">oneAsString</span> <span class="o">==</span> <span class="err">“</span><span class="m">1</span><span class="err">”</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// double -&amp;gt; String</span>
</span><span class='line'><span class="kd">var</span> <span class="n">piAsString</span> <span class="o">=</span> <span class="m">3.14159</span><span class="p">.</span><span class="n">toStringAsFixed</span><span class="p">(</span><span class="m">2</span><span class="p">);</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">piAsString</span> <span class="o">==</span> <span class="err">“</span><span class="m">3.14</span><span class="err">”</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>num</code>接口指定了传统的位运算包括<code>shift</code>,<code>AND</code>,<code>OR</code>。例如：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="k">assert</span><span class="p">((</span><span class="m">3</span> <span class="err">« </span><span class="m">1</span><span class="p">)</span> <span class="o">==</span> <span class="m">6</span><span class="p">);</span>  <span class="c1">// 0011 « 1 == 0110</span>
</span><span class='line'><span class="k">assert</span><span class="p">((</span><span class="m">3</span><span class="err"> »</span> <span class="m">1</span><span class="p">)</span> <span class="o">==</span> <span class="m">1</span><span class="p">);</span>  <span class="c1">// 0011 » 1 == 0001</span>
</span><span class='line'><span class="k">assert</span><span class="p">((</span><span class="m">3</span> <span class="o">|</span> <span class="m">4</span><span class="p">)</span>  <span class="o">==</span> <span class="m">7</span><span class="p">);</span>  <span class="c1">// 0011 | 0100 == 0111</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><a href="#0">回到目录</a></p>

<h3 id="3.3">布尔(booleans)</h3>

<p>Dart有正式的布尔类型，名为<code>bool</code>。只有两种对象的类型为<code> bool</code>：布尔常量<code>true</code>和<code>false</code>。</p>

<p>当Dart需要一个布尔值时，如果该值不是<code>true</code>，那就肯定是<code>false</code>。不像在<code>JavaScript</code>中:<code>1</code>或<code>non-null</code>对象都是作为<code>true</code>对待。</p>

<p>例如，考虑下述的代码：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">var</span> <span class="n">name</span> <span class="o">=</span> <span class="err">‘</span><span class="n">Bob</span><span class="err">’</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">print</span><span class="p">(</span><span class="err">“</span><span class="n">You</span> <span class="n">have</span> <span class="n">a</span> <span class="n">name</span><span class="o">!</span><span class="err">”</span><span class="p">);</span> <span class="c1">// Prints in JavaScript, not in Dart.</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在<code>JavaScript</code>环境，该段代码会输出”You have a name!”，因为 <code>name</code>是<code>non-null</code>对象。但在Dart中，这段代码不会输出任何内容，因为<code>name</code>被作为<code>false</code>对待（即<code>name != true</code>）。</p>

<p>下面是另一段 JavaScript 与 Dart 表现截然不同的示例代码：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="m">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">print</span><span class="p">(</span><span class="err">“</span><span class="n">JavaScript</span> <span class="n">prints</span> <span class="k">this</span> <span class="n">line</span> <span class="n">because</span> <span class="n">it</span> <span class="n">thinks</span> <span class="m">1</span> <span class="k">is</span> <span class="kc">true</span><span class="p">.</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">print</span><span class="p">(</span><span class="err">“</span><span class="n">Dart</span> <span class="k">in</span> <span class="n">production</span> <span class="n">mode</span> <span class="n">prints</span> <span class="k">this</span> <span class="n">line</span><span class="p">.</span><span class="err">”</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// However, in checked mode, if (1) will throw an exception</span>
</span><span class='line'>  <span class="c1">// because 1 is not a boolean.</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote>
  <p>Tip:上述代码在测试模式下不能通过。</p>
</blockquote>

<p>Dart对布尔值的处理方式是为了避免很多值被作为<code>true</code>对待 所引发的诸多奇怪现象。对你而言，应避免使用<code>if (nonboolean_value) </code>这样的代码，而应该对值进行显式检查。例如：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="c1">// Check for an empty string.</span>
</span><span class='line'><span class="kd">var</span> <span class="n">fullName</span> <span class="o">=</span> <span class="err">‘’</span><span class="p">;</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">fullName</span><span class="p">.</span><span class="n">isEmpty</span><span class="p">());</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// Check for zero.</span>
</span><span class='line'><span class="kd">var</span> <span class="n">hitPoints</span> <span class="o">=</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">hitPoints</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="m">0</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// Check for null.</span>
</span><span class='line'><span class="kd">var</span> <span class="n">unicorn</span><span class="p">;</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">unicorn</span> <span class="o">==</span> <span class="kc">null</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// Check for NaN.</span>
</span><span class='line'><span class="kd">var</span> <span class="n">iMeantToDoThis</span> <span class="o">=</span> <span class="m">0</span><span class="o">/</span><span class="m">0</span><span class="p">;</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">iMeantToDoThis</span><span class="p">.</span><span class="n">isNaN</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><a href="#0">回到目录</a></p>

<h3 id="3.4">列表(lists, also known as arrays)</h3>

<p>几乎所有编程语言中都有的最常见的集合或许就是<em>数组</em>了(或者称之为有顺序的对象集合)。在Dart中，数组属于<code>List</code>类型的对象，因此我们通常称之为列表。当你将<code>Dart</code>编译成<code>JavaScript</code>脚本时，Dart列表会被编译为<code>JavaScript</code>数组。</p>

<p>Dart列表常量与<code>JavaScript</code>数组常量一样。这是一个简单的Dart 列表：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">var</span> <span class="n">list</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>可以获取列表的长度以及引用列表元素，语法和<code>JavaScript</code>相同：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">var</span> <span class="n">list</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">];</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">list</span><span class="p">.</span><span class="n">length</span> <span class="o">==</span> <span class="m">3</span><span class="p">);</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">list</span><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="o">==</span> <span class="m">2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>可以使用<code>add()</code>方法将元素添加到列表：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">var</span> <span class="n">list</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">];</span>
</span><span class='line'><span class="n">list</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="m">4</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>要将元素从列表移除（减短列表长度），使用<code>removeRange()</code>方法：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">var</span> <span class="n">list</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">4</span><span class="p">];</span>
</span><span class='line'><span class="n">list</span><span class="p">.</span><span class="n">removeRange</span><span class="p">(</span><span class="m">2</span><span class="p">,</span> <span class="m">1</span><span class="p">);</span> <span class="c1">// Remove the third element.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>Iterating</strong>   </p>

<p>如果需要处理列表的每一个元素，可以使用<code>for</code>、<code>for...in</code>或 <code>forEach()</code>。如果需要当前遍历到的索引编号，使用<code>for</code>语句：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">var</span> <span class="n">list</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">];</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="n">x</span> <span class="o">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">list</span><span class="p">.</span><span class="n">length</span><span class="p">;</span> <span class="n">x</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">print</span><span class="p">(</span><span class="err">‘</span><span class="nl">$x:</span> <span class="n">$</span><span class="p">{</span><span class="n">list</span><span class="p">[</span><span class="n">x</span><span class="p">]}</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>如果不需要索引编号，可以使用<code>for...in</code>语句：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">var</span> <span class="n">list</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">];</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">final</span> <span class="n">x</span> <span class="k">in</span> <span class="n">list</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">print</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>如果只是想对列表各元素应用某个函数，使用<code>forEach()</code>方法：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">var</span> <span class="n">list</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">];</span>
</span><span class='line'><span class="n">printElement</span><span class="p">(</span><span class="n">element</span><span class="p">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">print</span><span class="p">(</span><span class="n">element</span><span class="p">);</span>  <span class="c1">// Define a function.</span>
</span><span class='line'><span class="n">list</span><span class="p">.</span><span class="n">forEach</span><span class="p">(</span><span class="n">printElement</span><span class="p">);</span>  <span class="c1">// Call the function on each list element.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>或者更简洁地：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">var</span> <span class="n">list</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">];</span>
</span><span class='line'><span class="n">list</span><span class="p">.</span><span class="n">forEach</span><span class="p">((</span><span class="n">element</span><span class="p">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">print</span><span class="p">(</span><span class="n">element</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>List and Collection methods</strong></p>

<p><code>forEach()</code>方法是<code>List</code>接口及其超接口<code>Collection</code>所定义的诸多实用方法之一。其他还有如：<code>filter()</code>方法可返回新的集合，只包含满足特定条件的元素。<code>every()</code>与<code>some()</code>方法分别可用来检查集合是否匹配 所有条件或至少一个条件。<code>sort()</code>方法允许按任意需要的条件对列表进行排序。</p>

<p>关于列表的更多信息请见<a href="http://www.dartlang.org/docs/language-tour/#generics">Generics</a>。</p>

<p><a href="#0">回到目录</a></p>

<h3 id="3.5">映射(maps)</h3>

<p>总的来说，映射是包含键值对应关系的对象。Dart对映射的支持是通过映射常量以及<code>Map</code>接口实现的。</p>

<p>下面是简单Dart映射的例子：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">var</span> <span class="n">gifts</span> <span class="o">=</span> <span class="p">{</span>                         <span class="c1">// A map literal</span>
</span><span class='line'><span class="c1">// Keys       Values</span>
</span><span class='line'>  <span class="err">“</span><span class="n">first</span><span class="err">”</span>  <span class="o">:</span> <span class="err">“</span><span class="n">partridge</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'>  <span class="err">“</span><span class="n">second</span><span class="err">”</span> <span class="o">:</span> <span class="err">“</span><span class="n">turtledoves</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'>  <span class="err">“</span><span class="n">fifth</span><span class="err">”</span>  <span class="o">:</span> <span class="err">“</span><span class="n">golden</span> <span class="n">rings</span><span class="err">”</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在映射常量中，每个<strong>键</strong>必须为字符串。如果您使用<code>Map</code>的构造函数，还有其他选择：键可以是字符串、数字或其他任意实现了[<code> Hashable</code>]接口(http://api.dartlang.org/dart_core/Hashable.html)的对象。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">var</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Map</span><span class="p">();</span>                  <span class="c1">// Use a Map constructor.</span>
</span><span class='line'><span class="n">map</span><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="o">=</span> <span class="err">“</span><span class="n">partridge</span><span class="err">”</span><span class="p">;</span>                 <span class="c1">// Key is 1; value is “partridge”.</span>
</span><span class='line'><span class="n">map</span><span class="p">[</span><span class="m">2</span><span class="p">]</span> <span class="o">=</span> <span class="err">“</span><span class="n">turtledoves</span><span class="err">”</span><span class="p">;</span>               <span class="c1">// Key is 2; value is “turtledoves”.</span>
</span><span class='line'><span class="n">map</span><span class="p">[</span><span class="m">5</span><span class="p">]</span> <span class="o">=</span> <span class="err">“</span><span class="n">golden</span> <span class="n">rings</span><span class="err">”</span><span class="p">;</span>              <span class="c1">// Key is 5; value is “golden rings”.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>映射中的<strong>值</strong>可以是任意对象或<code>null</code>。</p>

<p>将新的键值对添加到现有映射中的方法与<code>JavaScript</code>中无异：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">var</span> <span class="n">gifts</span> <span class="o">=</span> <span class="p">{</span> <span class="err">“</span><span class="n">first</span><span class="err">”</span><span class="o">:</span> <span class="err">“</span><span class="n">partridge</span><span class="err">”</span> <span class="p">};</span>
</span><span class='line'><span class="n">gifts</span><span class="p">[</span><span class="err">“</span><span class="n">fourth</span><span class="err">”</span><span class="p">]</span> <span class="o">=</span> <span class="err">“</span><span class="n">calling</span> <span class="n">birds</span><span class="err">”</span><span class="p">;</span>    <span class="c1">// Add a key-value pair.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>从映射中提取值的方法也和<code>JavaScript</code>中一样：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">var</span> <span class="n">gifts</span> <span class="o">=</span> <span class="p">{</span> <span class="err">“</span><span class="n">first</span><span class="err">”</span><span class="o">:</span> <span class="err">“</span><span class="n">partridge</span><span class="err">”</span> <span class="p">};</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">gifts</span><span class="p">[</span><span class="err">‘</span><span class="n">first</span><span class="err">’</span><span class="p">]</span> <span class="o">==</span> <span class="err">‘</span><span class="n">partridge</span><span class="err">’</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>如果你查找的键在映射中不存在，将在返回中得到<code>null</code>。不过，由于值可以为<code>null</code>，可能需要使用<a href="http://api.dartlang.org/dart_core/Map.html#containsKey"><code>containsKey()</code></a>或<a href="http://api.dartlang.org/dart_core/Map.html#putIfAbsent"><code>putIfAbsent()</code></a>等方法获知<code>null</code>的确切情况。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">var</span> <span class="n">gifts</span> <span class="o">=</span> <span class="p">{</span> <span class="err">“</span><span class="n">first</span><span class="err">”</span><span class="o">:</span> <span class="err">“</span><span class="n">partridge</span><span class="err">”</span> <span class="p">};</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">gifts</span><span class="p">[</span><span class="err">‘</span><span class="n">fifth</span><span class="err">’</span><span class="p">]</span> <span class="o">==</span> <span class="kc">null</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>使用<code>.length</code>可以获取映射中键值对的数目:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">var</span> <span class="n">gifts</span> <span class="o">=</span> <span class="p">{</span> <span class="err">“</span><span class="n">first</span><span class="err">”</span><span class="o">:</span> <span class="err">“</span><span class="n">partridge</span><span class="err">”</span> <span class="p">};</span>
</span><span class='line'><span class="n">gifts</span><span class="p">[</span><span class="err">“</span><span class="n">fourth</span><span class="err">”</span><span class="p">]</span> <span class="o">=</span> <span class="err">“</span><span class="n">calling</span> <span class="n">birds</span><span class="err">”</span><span class="p">;</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">gifts</span><span class="p">.</span><span class="n">length</span> <span class="o">==</span> <span class="m">2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>要从映射中移除键值对，可以使用<code>remove()</code>方法：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">var</span> <span class="n">gifts</span> <span class="o">=</span> <span class="p">{</span> <span class="err">“</span><span class="n">first</span><span class="err">”</span><span class="o">:</span> <span class="err">“</span><span class="n">partridge</span><span class="err">”</span> <span class="p">};</span>
</span><span class='line'><span class="n">gifts</span><span class="p">[</span><span class="err">“</span><span class="n">fourth</span><span class="err">”</span><span class="p">]</span> <span class="o">=</span> <span class="err">“</span><span class="n">calling</span> <span class="n">birds</span><span class="err">”</span><span class="p">;</span>
</span><span class='line'><span class="n">gifts</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="err">‘</span><span class="n">first</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">gifts</span><span class="p">.</span><span class="n">length</span> <span class="o">==</span> <span class="m">1</span><span class="p">);</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">gifts</span><span class="p">[</span><span class="err">‘</span><span class="n">first</span><span class="err">’</span><span class="p">]</span> <span class="o">==</span> <span class="kc">null</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>可以使用<code>Map.from()</code>构造函数复制映射：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">var</span> <span class="n">gifts</span> <span class="o">=</span> <span class="p">{</span> <span class="err">“</span><span class="n">first</span><span class="err">”</span><span class="o">:</span> <span class="err">“</span><span class="n">partridge</span><span class="err">”</span> <span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="n">regifts</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Map</span><span class="p">.</span><span class="n">from</span><span class="p">(</span><span class="n">gifts</span><span class="p">);</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">regifts</span><span class="p">[</span><span class="err">‘</span><span class="n">first</span><span class="err">’</span><span class="p">]</span> <span class="o">==</span> <span class="err">‘</span><span class="n">partridge</span><span class="err">’</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>Iterating</strong></p>

<p>遍历映射的内容有几种方法。 使用<code>forEach()</code>方法 可同时访问键值。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">var</span> <span class="n">gifts</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="err">“</span><span class="n">first</span><span class="err">”</span> <span class="o">:</span> <span class="err">“</span><span class="n">partridge</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'>  <span class="err">“</span><span class="n">second</span><span class="err">”</span><span class="o">:</span> <span class="err">“</span><span class="n">turtledoves</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'>  <span class="err">“</span><span class="n">fifth</span><span class="err">”</span> <span class="o">:</span> <span class="err">“</span><span class="n">golden</span> <span class="n">rings</span><span class="err">”</span><span class="p">};</span>
</span><span class='line'><span class="n">gifts</span><span class="p">.</span><span class="n">forEach</span><span class="p">((</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="p">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">print</span><span class="p">(</span><span class="err">‘</span><span class="n">$k</span> <span class="o">:</span> <span class="n">$v</span><span class="err">’</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote>
  <p>Tip:不要指望forEach()按特定顺序返回键值对。</p>
</blockquote>

<p>如果只对键或值感兴趣，可以分别使用<code>getKeys()</code>或<code>getValues()</code>。两种方法均可返回<a href="http://api.dartlang.org/dart_core/Collection.html"><code>Collection</code></a>对象。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">var</span> <span class="n">gifts</span> <span class="o">=</span> <span class="p">{</span><span class="err">“</span><span class="n">first</span><span class="err">”</span><span class="o">:</span> <span class="err">“</span><span class="n">partridge</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">second</span><span class="err">”</span><span class="o">:</span> <span class="err">“</span><span class="n">turtledoves</span><span class="err">”</span><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="n">values</span> <span class="o">=</span> <span class="n">gifts</span><span class="p">.</span><span class="n">getValues</span><span class="p">();</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//Print partridge and turtledoves, but not necessarily in that order.</span>
</span><span class='line'><span class="n">values</span><span class="p">.</span><span class="n">forEach</span><span class="p">((</span><span class="n">v</span><span class="p">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">print</span><span class="p">(</span><span class="n">v</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote>
  <p>Tip:映射对象本身不会扩展到<code>Collection</code>接口。</p>
</blockquote>

<h3 id="built-in-types">built-in types总结</h3>

<p>Dart的<a href="http://www.dartlang.org/docs/language-tour/#built-in-types">内建类型(built-in types)</a>均有特别的常量格式，并实现了内置接口。 例如，数字常量如<code>1</code>和<code>1.1</code>，它们实现了<code>num</code>接口。</p>

<p>你通常会用常量创建大多数内置类型对象，但也可以用构造函数。 布尔类型有所不同，因为您无法创建类型为<code>bool</code>的新对象；只能用<code>true</code>与<code>false</code>实现。</p>

<p>关于映射与列表的详细信息，请参见<a href="http://www.dartlang.org/docs/language-tour/#generics">泛型(Generics)</a>。</p>

<p><a href="#0">回到目录</a></p>

<h2 id="4">4.函数(Functions)</h2>

<p>这是一个简单的函数：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kt">String</span> <span class="n">say</span><span class="p">(</span><span class="kt">String</span> <span class="n">from</span><span class="p">,</span> <span class="kt">String</span> <span class="n">msg</span><span class="p">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="err">“</span><span class="n">$from</span> <span class="n">says</span> <span class="n">$msg</span><span class="err">”</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这是调用该函数的示例：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">say</span><span class="p">(</span><span class="err">“</span><span class="n">Bob</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">Hello</span><span class="err">”</span><span class="p">)</span> <span class="o">==</span> <span class="err">“</span><span class="n">Bob</span> <span class="n">says</span> <span class="n">Hello</span><span class="err">”</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>若忽略类型，上面的代码也可以这样写：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="n">say</span><span class="p">(</span><span class="n">from</span><span class="p">,</span> <span class="n">msg</span><span class="p">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="err">“</span><span class="n">$from</span> <span class="n">says</span> <span class="n">$msg</span><span class="err">”</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>不过，我们推荐在函数定义处说明参数类型。</p>

<p><code>=&gt; e;</code>语法是<code>{ return e; }</code>的简写方式。如<code>say(from, msg) =&gt; "$from says $msg";</code>同下面的写法等效：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="n">say</span><span class="p">(</span><span class="n">from</span><span class="p">,</span> <span class="n">msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="err">“</span><span class="n">$from</span> <span class="n">says</span> <span class="n">$msg</span><span class="err">”</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>可选参数(Optional parameters)</strong></p>

<p>将函数参数放在<code>[]</code>括号内可将其标记为可选参数。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kt">String</span> <span class="n">say</span><span class="p">(</span><span class="kt">String</span> <span class="n">from</span><span class="p">,</span> <span class="kt">String</span> <span class="n">msg</span><span class="p">,</span> <span class="p">[</span><span class="kt">String</span> <span class="n">device</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="n">result</span> <span class="o">=</span> <span class="err">“</span><span class="n">$from</span> <span class="n">says</span> <span class="n">$msg</span><span class="err">”</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">device</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="err">“</span><span class="n">$result</span> <span class="n">with</span> <span class="n">a</span> <span class="n">$device</span><span class="err">”</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>下面是调用时不提供可选参数的例子：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">say</span><span class="p">(</span><span class="err">“</span><span class="n">Bob</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">Howdy</span><span class="err">”</span><span class="p">)</span> <span class="o">==</span> <span class="err">“</span><span class="n">Bob</span> <span class="n">says</span> <span class="n">Howdy</span><span class="err">”</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>下面是提供第三个参数调用该函数时的例子：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">say</span><span class="p">(</span><span class="err">“</span><span class="n">Bob</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">Howdy</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">smoke</span> <span class="n">signal</span><span class="err">”</span><span class="p">)</span> <span class="o">==</span>
</span><span class='line'>    <span class="err">“</span><span class="n">Bob</span> <span class="n">says</span> <span class="n">Howdy</span> <span class="n">with</span> <span class="n">a</span> <span class="n">smoke</span> <span class="n">signal</span><span class="err">”</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>可选参数的默认值(Default values for optional parameters)</strong></p>

<p>可以给可选参数指定默认值。默认值必须为编译时常量。 如果没有提供默认值，其值则为<code>null</code>（如我们在上例中看到的）。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kt">String</span> <span class="n">say</span><span class="p">(</span><span class="kt">String</span> <span class="n">from</span><span class="p">,</span> <span class="kt">String</span> <span class="n">msg</span><span class="p">,</span>
</span><span class='line'>    <span class="p">[</span><span class="kt">String</span> <span class="n">device</span><span class="o">=</span><span class="err">’</span><span class="n">carrier</span> <span class="n">pigeon</span><span class="err">’</span><span class="p">,</span> <span class="kt">String</span> <span class="n">mood</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="n">result</span> <span class="o">=</span> <span class="err">“</span><span class="n">$from</span> <span class="n">says</span> <span class="n">$msg</span><span class="err">”</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">device</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="err">“</span><span class="n">$result</span> <span class="n">with</span> <span class="n">a</span> <span class="n">$device</span><span class="err">”</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">mood</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="err">“</span><span class="n">$result</span> <span class="p">(</span><span class="k">in</span> <span class="n">a</span> <span class="n">$mood</span> <span class="n">mood</span><span class="p">)</span><span class="err">”</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>如果省去可选参数，则会使用默认值：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">say</span><span class="p">(</span><span class="err">“</span><span class="n">Bob</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">Howdy</span><span class="err">”</span><span class="p">)</span> <span class="o">==</span> <span class="err">‘</span><span class="n">Bob</span> <span class="n">says</span> <span class="n">Howdy</span> <span class="n">with</span> <span class="n">a</span> <span class="n">carrier</span> <span class="n">pigeon</span><span class="err">’</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>你也可以将<code>null</code>传递给可选参数，改变默认其默认值
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">say</span><span class="p">(</span><span class="err">‘</span><span class="n">Bob</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Howdy</span><span class="err">’</span><span class="p">,</span> <span class="kc">null</span><span class="p">)</span> <span class="o">==</span> <span class="err">‘</span><span class="n">Bob</span> <span class="n">says</span> <span class="n">Howdy</span><span class="err">’</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>命名参数(Named parameters)</strong>\</p>

<p>可选参数同时也是命名参数。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">say</span><span class="p">(</span><span class="err">“</span><span class="n">Bob</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">Howdy</span><span class="err">”</span><span class="p">,</span> <span class="nl">device:</span> <span class="err">“</span><span class="n">tin</span> <span class="n">can</span> <span class="n">and</span> <span class="n">string</span><span class="err">”</span><span class="p">)</span> <span class="o">==</span>
</span><span class='line'>    <span class="err">“</span><span class="n">Bob</span> <span class="n">says</span> <span class="n">Howdy</span> <span class="n">with</span> <span class="n">a</span> <span class="n">tin</span> <span class="n">can</span> <span class="n">and</span> <span class="n">string</span><span class="err">”</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">assert</span><span class="p">(</span><span class="n">say</span><span class="p">(</span><span class="err">“</span><span class="n">Bob</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">Howdy</span><span class="err">”</span><span class="p">,</span> <span class="nl">mood:</span> <span class="err">“</span><span class="n">fresh</span><span class="err">”</span><span class="p">)</span> <span class="o">==</span>
</span><span class='line'>    <span class="err">“</span><span class="n">Bob</span> <span class="n">says</span> <span class="n">Howdy</span> <span class="n">with</span> <span class="n">a</span> <span class="n">carrier</span> <span class="n">pigeon</span> <span class="p">(</span><span class="k">in</span> <span class="n">a</span> <span class="n">fresh</span> <span class="n">mood</span><span class="p">)</span><span class="err">”</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>一级函式(First class functions)</strong></p>

<p>可以将函数作为参数传递给其他函数。例如：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">var</span> <span class="n">ages</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">10</span><span class="p">,</span><span class="m">14</span><span class="p">,</span><span class="m">21</span><span class="p">];</span>
</span><span class='line'><span class="kd">var</span> <span class="n">oddAges</span> <span class="o">=</span> <span class="n">ages</span><span class="p">.</span><span class="n">filter</span><span class="p">((</span><span class="n">i</span><span class="p">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">i</span> <span class="o">%</span> <span class="m">2</span> <span class="o">==</span> <span class="m">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>上述例子可以达到以下效果
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kt">bool</span> <span class="n">isOdd</span><span class="p">(</span><span class="kt">num</span> <span class="n">i</span><span class="p">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">i</span> <span class="o">%</span> <span class="m">2</span> <span class="o">==</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="n">ages</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">10</span><span class="p">,</span><span class="m">14</span><span class="p">,</span><span class="m">21</span><span class="p">];</span>
</span><span class='line'><span class="kd">var</span> <span class="n">oddAges</span> <span class="o">=</span> <span class="n">ages</span><span class="p">.</span><span class="n">filter</span><span class="p">(</span><span class="n">isOdd</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>也可以将函数赋值给变量，比如：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">var</span> <span class="n">loudify</span> <span class="o">=</span> <span class="p">(</span><span class="n">msg</span><span class="p">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="err">‘</span><span class="o">!!!</span> <span class="n">$</span><span class="p">{</span><span class="n">msg</span><span class="p">.</span><span class="n">toUpperCase</span><span class="p">()}</span> <span class="o">!!!</span><span class="err">’</span><span class="p">;</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">loudify</span><span class="p">(</span><span class="err">‘</span><span class="n">hello</span><span class="err">’</span><span class="p">)</span> <span class="o">==</span>
</span><span class='line'>    <span class="err">‘</span><span class="o">!!!</span> <span class="n">HELLO</span> <span class="o">!!!</span><span class="err">’</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>词法封装(Lexical closures)</strong></p>

<p>函数可将周边区域定义的变量进行封装处理。下例展示了<code>makeAdder</code>函数如何捕获变量<code>n</code>并将其传递给<code>makeAdder</code>所返回的函数。不论所返回的函数在哪里调用，它都能使用变量<code>n</code>。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="n">Function</span> <span class="n">makeAdder</span><span class="p">(</span><span class="kt">num</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="kt">num</span> <span class="n">i</span><span class="p">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">n</span> <span class="o">+</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="n">add2</span> <span class="o">=</span> <span class="n">makeAdder</span><span class="p">(</span><span class="m">2</span><span class="p">);</span>
</span><span class='line'>  <span class="k">assert</span><span class="p">(</span><span class="n">add2</span><span class="p">(</span><span class="m">3</span><span class="p">)</span> <span class="o">==</span> <span class="m">5</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
(特别感谢Bob Nystrom提供此例)</p>

<p><strong>返回值(Return values)</strong>
所有函数都会返回一个值。如果未指定返回值，则将在函数主体的末端隐含的调用<code>return null;</code>语句。</p>

<h3 id="summary-of-functions">函数总结(Summary of functions)</h3>
<p>Dart支持以及函式，以及可选参数、命名参数和参数默认值。函数可被赋值给变量，或作为参数传递给其他函数。函数还支持词法封装，可访问其直接词域以外的变量。</p>

<p><a href="#0">回到目录</a></p>

<h2 id="5">5.操作符/运算符(Operators)</h2>

<p>Dart支持运算符。它不仅定义运算符，还允许重新定义其中很多运算符。</p>

<p>下表按优先级顺序列出了Dart的全部运算符。</p>

<table>
  <thead>
    <tr>
      <th>描述(Description)</th>
      <th>操作符/运算符(Operators)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>一元后缀(unary postfix)</td>
      <td><code>expr++</code> <code>expr--</code> <code>()</code> <code>[]</code> .</td>
    </tr>
    <tr>
      <td>一元前缀(unary prefix)</td>
      <td><code>-expr</code> <code>!expr</code> <code>~expr</code> <code>++expr</code> <code>--expr</code></td>
    </tr>
    <tr>
      <td>乘除(multiplicative)</td>
      <td><code>*</code> <code>/</code> <code>%</code> <code>~/</code></td>
    </tr>
    <tr>
      <td>加减(additive)</td>
      <td><code>+</code> <code>-</code></td>
    </tr>
    <tr>
      <td>移位(shift)</td>
      <td><code>&lt;&lt;</code> <code>&gt;&gt;</code></td>
    </tr>
    <tr>
      <td>关系(relational)</td>
      <td><code>is</code> <code>is!</code> <code>&gt;=</code> <code>&gt;</code> <code>&lt;=</code> <code>&lt;</code></td>
    </tr>
    <tr>
      <td>相等性(equality)</td>
      <td><code>==</code> <code>!=</code> <code>===</code> <code>!==</code></td>
    </tr>
    <tr>
      <td>按位与(bitwise AND)</td>
      <td><code>&amp;</code></td>
    </tr>
    <tr>
      <td>按位异或(bitwise XOR)</td>
      <td><code>^</code></td>
    </tr>
    <tr>
      <td>按位或(bitwise OR)</td>
      <td><code>|</code></td>
    </tr>
    <tr>
      <td>逻辑与(logical AND)</td>
      <td><code>&amp;&amp;</code></td>
    </tr>
    <tr>
      <td>逻辑或(logical OR)</td>
      <td><code>||</code></td>
    </tr>
    <tr>
      <td>条件(conditional)</td>
      <td><code>expr ? expr : expr</code></td>
    </tr>
    <tr>
      <td>赋值(assignment)</td>
      <td><code>=</code> <code>*=</code> <code>/=</code> <code>~/=</code> <code>%=</code> <code>+=</code> <code>-=</code> <code>&lt;&lt;=</code> <code>&gt;&gt;=</code> <code>&amp;=</code> <code>^=</code> <code>|=</code></td>
    </tr>
  </tbody>
</table>

<p>例如，<code>%</code>运算符的优先级高于<code>==</code>，因此在其之前执行；而<code>==</code>的优先级又高于<code>&amp;&amp;</code>。这样的优先顺序意味着下面两行代码是等价执行的：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="k">if</span> <span class="p">((</span><span class="n">n</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="m">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="p">(</span><span class="n">d</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="m">0</span><span class="p">))</span> <span class="c1">// Parens improve readability.</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="m">0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">d</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="m">0</span><span class="p">)</span>     <span class="c1">// Harder to read, but equivalent.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><a href="#0">回到目录</a></p>

<p>本章节包含以下话题：</p>

<ul>
  <li><a href="#5.1">算术运算符(arithmetic operators)</a></li>
  <li><a href="#5.2">相等性与关系运算符(equality and relational operators)</a></li>
  <li><a href="#5.3">赋值运算符(assignment operators)</a></li>
  <li><a href="#5.4">逻辑运算符(logical operators)</a></li>
  <li><a href="#5.5">位操作与移位运算符(bitwise and shift operators)</a></li>
  <li><a href="#5.6">其他运算符(other operators)</a></li>
  <li><a href="#5.7">运算符作为方法调用(operators as methods)</a></li>
</ul>

<h3 id="5.1">5.1算术运算符(arithmetic operators)</h3>
<p>Dart支持常用的算术运算符。</p>

<table>
  <thead>
    <tr>
      <th>运算符(Operator)</th>
      <th>意义(Meaning)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>+</code></td>
      <td>加(add)</td>
    </tr>
    <tr>
      <td><code>-</code></td>
      <td>减(subtract)</td>
    </tr>
    <tr>
      <td><code>-expr</code></td>
      <td>一元否定(unary negation: reverse the sign of the expression)</td>
    </tr>
    <tr>
      <td><code>*</code></td>
      <td>乘(multiply)</td>
    </tr>
    <tr>
      <td><code>/</code></td>
      <td>除(divide)</td>
    </tr>
    <tr>
      <td><code>~/</code></td>
      <td>除，返回结果整数部分(divide, returning an integer result)</td>
    </tr>
    <tr>
      <td><code>%</code></td>
      <td>求余(get the remainder)</td>
    </tr>
  </tbody>
</table>

<p>例子：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">var</span> <span class="n">a</span> <span class="o">=</span> <span class="m">2</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="n">b</span> <span class="o">=</span> <span class="m">3</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">assert</span><span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">==</span> <span class="m">5</span><span class="p">);</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">a</span> <span class="o">-</span> <span class="n">b</span> <span class="o">==</span> <span class="o">-</span><span class="m">1</span><span class="p">);</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">a</span> <span class="o">*</span> <span class="n">b</span> <span class="o">==</span> <span class="m">6</span><span class="p">);</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">a</span> <span class="o">/</span> <span class="n">b</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="m">0.6</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">a</span> <span class="o">/</span> <span class="n">b</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="m">0.7</span><span class="p">);</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">a</span> <span class="o">~/</span> <span class="n">b</span> <span class="o">==</span> <span class="m">0</span><span class="p">);</span>  <span class="c1">// Quotient</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">a</span> <span class="o">%</span> <span class="n">b</span> <span class="o">==</span> <span class="m">2</span><span class="p">);</span>   <span class="c1">// Remainder</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Dart还支持前后缀自增减运算符。</p>

<table>
  <thead>
    <tr>
      <th>运算符(Operator)</th>
      <th>意义(Meaning)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>++var</code></td>
      <td><code>var = var + 1</code> (expression value is <code>var + 1</code>)</td>
    </tr>
    <tr>
      <td><code>var++</code></td>
      <td><code>var = var + 1</code> (expression value is <code>var</code>)</td>
    </tr>
    <tr>
      <td><code>--var</code></td>
      <td><code>var = var - 1</code> (expression value is <code>var - 1</code>)</td>
    </tr>
    <tr>
      <td><code>var--</code></td>
      <td><code>var = var - 1</code> (expression value is <code>var</code>)</td>
    </tr>
  </tbody>
</table>

<p>例子：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">var</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">a</span> <span class="o">=</span> <span class="m">0</span><span class="p">;</span><span class="o">&lt;</span><span class="n">br</span> <span class="o">/&gt;</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="o">++</span><span class="n">a</span><span class="p">;</span>         <span class="c1">// Increment a before b gets its value.</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">b</span><span class="p">);</span>  <span class="c1">// 1 == 1  &lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">a</span> <span class="o">=</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="o">++</span><span class="p">;</span>         <span class="c1">// Increment a AFTER b gets its value.</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">a</span> <span class="o">!=</span> <span class="n">b</span><span class="p">);</span>  <span class="c1">// 1 != 0&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">a</span> <span class="o">=</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="err">–</span><span class="n">a</span><span class="p">;</span>         <span class="c1">// Decrement a before b gets its value.</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">b</span><span class="p">);</span>  <span class="c1">// -1 == -1&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">a</span> <span class="o">=</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="err">–</span><span class="p">;</span>         <span class="c1">// Decrement a AFTER b gets its value.</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">a</span> <span class="o">!=</span> <span class="n">b</span><span class="p">)</span> <span class="p">;</span> <span class="c1">// -1 != 0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><a href="#0">回到目录</a></p>

<h3 id="5.2">5.2相等性与关系运算符(equality and relational operators)</h3>

<table>
  <thead>
    <tr>
      <th>运算符(Operator)</th>
      <th>意义(Meaning)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>==</code></td>
      <td>equal (see discussion below)</td>
    </tr>
    <tr>
      <td><code>!=</code></td>
      <td>not equal</td>
    </tr>
    <tr>
      <td><code>===</code></td>
      <td>same instance</td>
    </tr>
    <tr>
      <td><code>!==</code></td>
      <td>not the same instance</td>
    </tr>
    <tr>
      <td><code>&gt;</code></td>
      <td>greater than</td>
    </tr>
    <tr>
      <td><code>&lt;</code></td>
      <td>less than</td>
    </tr>
    <tr>
      <td><code>&gt;=</code></td>
      <td>greater than or equal to</td>
    </tr>
    <tr>
      <td><code>&lt;=</code></td>
      <td>less than or equal to</td>
    </tr>
    <tr>
      <td><code>is</code></td>
      <td>true if the object has the specified type (see discussion below)</td>
    </tr>
    <tr>
      <td><code>is!</code></td>
      <td>false if the object has the specified type</td>
    </tr>
  </tbody>
</table>

<p>要测试<code>x</code>与<code>y</code>两个对象是否代表相同的事物，请使用<code>==</code>运算符。通常不必使用<code>===</code>运算符，该运算符用于测试两个对象是否是完全一样的对象。<code>==</code>运算符的工作原理如下：</p>

<ol>
  <li>如果<code>x===y</code>, 返回<code>true</code>.</li>
  <li>否则, 如果<code>x</code>或<code>y</code>为<code>null</code>, 返回<code>false</code>.</li>
  <li>否则，返回表达式<code>x.equals(y)</code>的结果.</li>
</ol>

<p><code>is</code>和<code>is!</code>运算符可方便检查类型。如果<code>obj</code>实现了<code>T</code>所指定的接口，则<code>obj is T</code>的结果为<code>true</code>。例如，<code>obj is Object</code>总为<code>true</code>。</p>

<p>下面的例子用到了各个相等性与关系运算符：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">var</span> <span class="n">a</span> <span class="o">=</span> <span class="m">2</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="n">b</span> <span class="o">=</span> <span class="m">3</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="n">c</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">assert</span><span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="m">2</span><span class="p">);</span>       <span class="c1">// 2 and 2 are equal.</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">a</span> <span class="o">!=</span> <span class="n">b</span><span class="p">);</span>       <span class="c1">// 2 and 3 aren’t equal.</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">a</span> <span class="o">===</span> <span class="n">c</span><span class="p">);</span>      <span class="c1">// a and c are the same object.</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">a</span> <span class="o">!==</span> <span class="n">b</span><span class="p">);</span>      <span class="c1">// 2 and 3 aren’t the same object.</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">b</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">a</span><span class="p">);</span>        <span class="c1">// 3 is more than 2.</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">a</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">b</span><span class="p">);</span>        <span class="c1">// 2 is less then 3.</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">b</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="n">b</span><span class="p">);</span>       <span class="c1">// 3 is greater than or equal to 3.</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">a</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">b</span><span class="p">);</span>       <span class="c1">// 2 is less than or equal to 3.</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">a</span> <span class="k">is</span> <span class="kt">num</span><span class="p">);</span>     <span class="c1">// 2 is a number.</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">a</span> <span class="k">is</span><span class="o">!</span> <span class="kt">String</span><span class="p">);</span> <span class="c1">// 2 is an int, not a string.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><a href="#0">回到目录</a></p>

<h3 id="5.3">5.3赋值运算符(assignment operators)</h3>

<p>可以使用<code>=</code>运算符进行赋值。也可以使用组合赋值运算符。</p>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>组合赋值符</th>
      <th>等效表达式</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>对运算符<code>op</code>:</td>
      <td><code>a op= b</code></td>
      <td><code>a = a op b</code></td>
    </tr>
    <tr>
      <td>例如:</td>
      <td><code>a += b</code></td>
      <td><code>a = a + b</code></td>
    </tr>
  </tbody>
</table>

<p>以下是所有的赋值运算符：</p>

<table>
  <tbody>
    <tr>
      <td><code>=</code></td>
      <td><code>+=</code></td>
      <td><code>–=</code></td>
      <td><code>*=</code></td>
    </tr>
    <tr>
      <td><code>/=</code></td>
      <td><code>~/=</code></td>
      <td><code>%=</code></td>
      <td><code>&lt;&lt;=</code></td>
    </tr>
    <tr>
      <td><code>&gt;&gt;=</code></td>
      <td><code>&amp;=</code></td>
      <td><code>^=</code></td>
      <td><code>|=</code></td>
    </tr>
  </tbody>
</table>

<p>下面的例子同时用到了赋值符和组合赋值运算符：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">var</span> <span class="n">a</span> <span class="o">=</span> <span class="m">2</span><span class="p">;</span>           <span class="c1">// Assign using =</span>
</span><span class='line'><span class="n">a</span> <span class="o">*=</span> <span class="m">3</span><span class="p">;</span>              <span class="c1">// Assign and multiply: a = a * 3</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="m">6</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><a href="#0">回到目录</a></p>

<h3 id="5.4">5.4逻辑运算符(logical operators)</h3>
<p>可以使用逻辑运算符对布尔表达式进行取反或组合。</p>

<table>
  <thead>
    <tr>
      <th>运算符(Operator)</th>
      <th>意义(Meaning)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>!expr</code></td>
      <td>反转以下表达式(<code>false</code>变为<code>true</code>，反之亦然)</td>
    </tr>
    <tr>
      <td><code>||</code></td>
      <td>logical OR</td>
    </tr>
    <tr>
      <td><code>&amp;&amp;</code></td>
      <td>logical AND</td>
    </tr>
  </tbody>
</table>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">done</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="p">(</span><span class="n">col</span> <span class="o">==</span> <span class="m">0</span> <span class="o">||</span> <span class="n">col</span> <span class="o">==</span> <span class="m">3</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// …Do something…</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><a href="#0">回到目录</a></p>

<h3 id="5.5">5.5位操作与移位运算符(bitwise and shift operators)</h3>
<p>在 Dart 中，可以对对象的各位进行操作。这些运算符与整数一起使用。</p>

<table>
  <thead>
    <tr>
      <th>运算符(Operator)</th>
      <th>意义(Meaning)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>&amp;</code></td>
      <td>AND</td>
    </tr>
    <tr>
      <td><code>|</code></td>
      <td>OR</td>
    </tr>
    <tr>
      <td><code>^</code></td>
      <td>XOR</td>
    </tr>
    <tr>
      <td><code>~expr</code></td>
      <td>一元位取补 (0变1, 1变0)</td>
    </tr>
    <tr>
      <td><code>&lt;&lt;</code></td>
      <td>左移</td>
    </tr>
    <tr>
      <td><code>&gt;&gt;</code></td>
      <td>右移</td>
    </tr>
  </tbody>
</table>

<p>下例使用了位操作与移位运算符。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">final</span> <span class="n">value</span> <span class="o">=</span> <span class="mh">0x22</span><span class="p">;</span>
</span><span class='line'><span class="kd">final</span> <span class="n">bitmask</span> <span class="o">=</span> <span class="mh">0x0F</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">assert</span><span class="p">((</span><span class="n">value</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">bitmask</span><span class="p">)</span>  <span class="o">==</span> <span class="mh">0x02</span><span class="p">);</span>  <span class="c1">// AND</span>
</span><span class='line'><span class="k">assert</span><span class="p">((</span><span class="n">value</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="o">~</span><span class="n">bitmask</span><span class="p">)</span> <span class="o">==</span> <span class="mh">0x20</span><span class="p">);</span>  <span class="c1">// AND NOT</span>
</span><span class='line'><span class="k">assert</span><span class="p">((</span><span class="n">value</span> <span class="o">|</span> <span class="n">bitmask</span><span class="p">)</span>  <span class="o">==</span> <span class="mh">0x2f</span><span class="p">);</span>  <span class="c1">// OR</span>
</span><span class='line'><span class="k">assert</span><span class="p">((</span><span class="n">value</span> <span class="o">^</span> <span class="n">bitmask</span><span class="p">)</span>  <span class="o">==</span> <span class="mh">0x2d</span><span class="p">);</span>  <span class="c1">// XOR</span>
</span><span class='line'><span class="k">assert</span><span class="p">((</span><span class="n">value</span> <span class="err">« </span><span class="m">4</span><span class="p">)</span>       <span class="o">==</span> <span class="mh">0x220</span><span class="p">);</span>
</span><span class='line'><span class="k">assert</span><span class="p">((</span><span class="n">value</span><span class="err"> »</span> <span class="m">4</span><span class="p">)</span>       <span class="o">==</span> <span class="mh">0x02</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="5.6">5.6其他运算符(other operators)</h3>

<table>
  <thead>
    <tr>
      <th>运算符(Operator)</th>
      <th>名称(Name)</th>
      <th>意义(Meaning)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>()</code></td>
      <td>函数应用</td>
      <td>代表函数调用</td>
    </tr>
    <tr>
      <td><code>[]</code></td>
      <td>列表访问</td>
      <td>列表特定索引位置的值</td>
    </tr>
    <tr>
      <td><code>expr1 ? expr2 : expr3</code></td>
      <td>条件</td>
      <td>如果<code>expr1</code>为<code>true</code>,则执行<code>expr2</code>;否则,执行<code>expr3</code>(技术上讲属于特别语法，不是运算符)</td>
    </tr>
    <tr>
      <td>.</td>
      <td>成员访问</td>
      <td>表示一个表达式的一个属性; 例:<code>foo.bar</code>从表达式<code>foo</code>中选取属性<code>bar</code></td>
    </tr>
  </tbody>
</table>

<h3 id="5.7">5.7运算符作为方法(operators as methods)</h3>
<p>运算符只是名字比较特别的实例方法。例如，表达式<code>1 + 2</code>调用了<code>1</code>的<code>+</code>方法，参数为<code>2</code>即<code>1.+(2)</code>。这种模型有重要意义：</p>

<ul>
  <li>Dart允许重载很多运算符。例如，如果定义了<code>Vector</code>类，可以再定义一个<code>+</code>方法，用来求两个向量之和。</li>
  <li>对于二元运算符，左侧的运算元决定了选用运算符的版本。例如，如果定义了一个<code>Vector</code>类和一个<code>Point</code>类，<code>aVector + aPoint</code>中会使用<code>Vector</code>版本的<code>+</code>。</li>
</ul>

<p>以下运算符可以重载：</p>

<table>
  <tbody>
    <tr>
      <td>&lt;</td>
      <td>&gt;</td>
      <td>&lt;=</td>
      <td>[]</td>
    </tr>
    <tr>
      <td>–</td>
      <td>+</td>
      <td>/</td>
      <td>[]= (list assignment)</td>
    </tr>
    <tr>
      <td>*</td>
      <td>%</td>
      <td>|</td>
      <td>~</td>
    </tr>
    <tr>
      <td>&amp;</td>
      <td>«</td>
      <td>»</td>
      <td>equals() (==) *</td>
    </tr>
    <tr>
      <td>&gt;=</td>
      <td>~/</td>
      <td>^</td>
      <td> </td>
    </tr>
  </tbody>
</table>

<h3 id="summary-of-operators">运算符总结(Summary of operators)</h3>
<p>Dart运算符的使用与行为一目了然。从技术层面来看，运算符是特别命名的方法，在首个操作数处调用。因此，操作数的顺序可能会造成差异：<code>a+b</code>的结果可能与<code>b+a</code>的不一定相同。你可以重载很多运算符。</p>

<p><a href="#0">回到目录</a></p>

<h2 id="6">控制流(Control flow)]</h2>
<p>可以使用下述语句控制Dart代码的执行流程：</p>

<ul>
  <li><a href="#6.1">If/else(If and else)</a></li>
  <li><a href="#6.2">For循环(For loops)</a></li>
  <li><a href="#6.3">While/do while(While and do while)</a></li>
  <li><a href="#6.4">Break/continue(Break and continue)</a></li>
  <li><a href="#6.5">Switch/case(Switch and case)</a></li>
  <li><a href="#6.6">Assert(Assert)</a></li>
</ul>

<h3 id="6.1">If/else</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">isRaining</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">you</span><span class="p">.</span><span class="n">bringRainCoat</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">isSnowing</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">you</span><span class="p">.</span><span class="n">wearJacket</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">car</span><span class="p">.</span><span class="n">putTopDown</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>记住，与<code>JavaScript</code>不同，Dart将所有<code>非true</code>的值当作false对待。详情请参见布尔值。</p>

<h3 id="6.2">For循环</h3>
<h3 id="6.3">While/do while</h3>
<h3 id="6.4">Break/continue</h3>
<h3 id="6.5">Switch/case</h3>
<h3 id="6.6">Assert</h3>

<h2 id="7">异常(Exceptions)</h2>

<h2 id="8">类(Classes)</h2>

<h2 id="9">接口(Classes)</h2>

<h2 id="10">泛型(Generics)</h2>

<h2 id="11">库和可访问性(Libraries and visibility)</h2>

<h2 id="12">隔离(Isolates)</h2>

<h2 id="13">类型定义(Typedefs)</h2>

<h2 id="14">注释(Comments)</h2>

<hr />

<p>.…….=»&gt;TO BE CONTINUED=»&gt;.…….</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不拖沓]]></title>
    <link href="http://vampirefan.github.com/blog/2012/09/18/bu-tuo-ta/"/>
    <updated>2012-09-18T18:37:00+08:00</updated>
    <id>http://vampirefan.github.com/blog/2012/09/18/bu-tuo-ta</id>
    <content type="html"><![CDATA[<p>专利号拿到了，可是晚了一周，否则可以作为奖学金评选条目。可见做事情要快，不能拖，要做的事情就应该尽全力最快的解决掉。以前一直认为自己效率挺高的。上大学以后却不像从前那么提前迅速的处理事情了。凡事喜欢拖到最后的deadline。这是个极其不好的习惯。一定要改！今天开始，把能做的事情都做完，要做的事情安排好；不拖沓每一件事情！要有效率的过好每一天！</p>

<p>发现一个学<code>ruby</code>的好东西：<a href="http://rubykoans.com/">http://rubykoans.com/</a>,在排错中学习，一个一个文件的排错，一点一点的到达终点。想法特别好，做的也特别有创意有系统。觉得像<code>C/C++</code>、<code>prel</code>、<code>php</code>是不是都可以做成像这样的学习方式。很赞很赞~
<!--more--></p>

<p>啊对了，<code>wordpress</code>上面设置访问权限终于有人告诉我答案了，亲测可行。这里感谢百度上回答我问题的<a href="http://zhidao.baidu.com/question/473338969.html&amp;__bd_tkn__=6ea61e3576378a035253a361a6b329b0800286af8078338d51fed8133ea5c69d362ad36bb4bcda3b39bb3949f6bbe47087ac3af56e60b1f4e7eb60157c5bfe319e6fa0fe570f03de0125270dd244cb0d3f7e9371785dbffed53e447e065e462fb9177f3b49b0aadeef7efdaccbdc8d0cc23326f04fab">朋友</a>~原理是在进入网站的时候执行<code>login.php</code>登陆页面。    </p>

<ul>
  <li>在当前主题的<code>function.php</code>中添加：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">function liveme_if_login()</span>
</span><span class='line'><span class="x">{</span>
</span><span class='line'><span class="x">  if(!is_user_logged_in())</span>
</span><span class='line'><span class="x">  {</span>
</span><span class='line'><span class="x">      auth_redirect();</span>
</span><span class='line'><span class="x">  }</span>
</span><span class='line'><span class="x">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></li>
  <li>再在<code>header.php</code>中添加：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span> <span class="nx">liveme_if_login</span><span class="p">();</span><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div></li>
</ul>

<p>可是我已经把博客搬到这里来了，暂时也没时间折腾<code>wordpress</code>,就先放下，感觉博客的搭建方法会一直有新技术出现的。暂时先不折腾这个了。<code>python</code>
框架也出来很多了。。。 ：）</p>

<p>最近“购岛”闹得沸沸扬扬，其实我对政治一直不是很感兴趣。虽然，在看很多爱国电影，电视剧，小说后会热血沸腾，爱国心澎湃。但平时是不怎么关心的。其实呢，很多事情上，国家对外的表现是它们的表现，有很多因素制约的。很多人说，呀，要打仗了。。。我其实并不希望。打仗终究不是好的解决办法。但是现在的中国，应该表现出自己的强势！我一向是对我国充满信心，充满自豪的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress上audio插件, IOS真机调试]]></title>
    <link href="http://vampirefan.github.com/blog/2012/09/13/about-macbook-pro/"/>
    <updated>2012-09-13T21:47:00+08:00</updated>
    <id>http://vampirefan.github.com/blog/2012/09/13/about-macbook-pro</id>
    <content type="html"><![CDATA[<p>入手Macbook Pro一段时间了,虽然一直很忙，只有晚上回寝室后摆弄一会会。不过也整顿的差不多了，也有一些体会了。可配置性和快捷性确实是windows不能比的。有些东西趁今天比较空，赶紧的记一记。</p>

<p>对于一般软件的破解还是比较容易找的，一般在<a href="http://mac.pcbeta.com/">Macidea</a>,加上baidu，google，想要的软件基本上都能找到破解。难找的就是一些比较冷门的软件了，比如novamind我还是没找到。其实如果我以后有钱了，我会考虑买正版的。</p>

<p>对于现在很火的云空间，云同步，我只能说，太多了，基本上都差不多。先觉得dropbox好，又觉得cloudapp好，还有baidu网盘，googleDrive，其实都差不多。想要做图床还是mp3外链，都还是要费好些功夫找。我现在觉得图床用<a href="http://minus.com/">minus</a>还行，挺快的。mp3用<a href="300.la">酷牛网盘</a>是支持外链的，可惜太慢了，后来发现一般的网盘像baidu网盘先共享然后下载，再右键看下载链接也能找到链接地址，但是不知道链接地址稳不稳定，过一段时间再说吧。
<!--more--></p>

<p>iphone5今天出来了，晚上到处都是负面评价，这个其实也不好说，现在大多数人都是表面上说这不好那不好，自己还是买了暗地里玩的乐呵呵的。看到一个新闻说苹果出口为美国挣了好些的GDP：
<blockquote><p></p><footer><strong>@Michael Feroli</strong> <cite>iPhone5的销售将拉动美国GDP增速0.25~0.5个百分点。</cite></footer></blockquote>
然后就有人评价“可见美国经济之疲软”。。。。</p>

<p>Mac上搭建Octopress真的很不错。于是还是把wordpress的博客搬到octopress上来了，我想要的功能基本上octopress上面都能实现了，花时间写了一个小插件把原来wordpress上的audio-player移植过来了，正则表达式很难学，于是仿照加套用<code>video_tag.rb</code>和<code>code_block.rb</code>写了自己的<code>audio_tag.rb</code>，实现了需要的插入mp3的功能。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>audio_tag (audio_tag.rb)</span> <a href='/downloads/code/audio_tag.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># Title:</span>
</span><span class='line'><span class="c1">#		Octopress audio-player Audio Tag</span>
</span><span class='line'><span class="c1"># Author:</span>
</span><span class='line'><span class="c1">#		vampirefan</span>
</span><span class='line'><span class="c1"># Syntax:</span>
</span><span class='line'><span class="c1">#		{% audio artists url/to/mp3 titles %}</span>
</span><span class='line'><span class="c1">#		{% audio artists url/to/mp3  %}</span>
</span><span class='line'><span class="c1">#		{% audio url/to/mp3 titles %}</span>
</span><span class='line'><span class="c1">#		{% audio url/to/mp3 %}</span>
</span><span class='line'><span class="c1"># Example:</span>
</span><span class='line'><span class="c1">#		{% audio artists http://example.org/music.mp3 the song %}</span>
</span><span class='line'><span class="c1"># Output:</span>
</span><span class='line'><span class="c1">#		&lt;p id=&quot;audioplayertitles&quot;&gt;Alternative content&lt;/p&gt;&lt;script type=&quot;text/javascript&quot;&gt;AudioPlayer.embed(&quot;audioplayertitles&quot;, {soundFile: &quot;http://example.org/music.mp3&quot;,titles:&quot;the song&quot;});&lt;/script&gt;</span>
</span><span class='line'><span class="c1">#########################################################################################</span>
</span><span class='line'><span class="c1"># Important!</span>
</span><span class='line'><span class="c1"># Please Add the following into the {root_url}/source/_includes/custom/head.html</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># &lt;script type=&quot;text/javascript&quot; src=&quot;http://wpaudioplayer.com/wp-content/plugins/audio-player/assets/audio-player.js?ver=2.0.4.1&quot;&gt;&lt;/script&gt;   </span>
</span><span class='line'><span class="c1"># &lt;script type=&quot;text/javascript&quot;&gt;  </span>
</span><span class='line'><span class="c1">#     AudioPlayer.setup(&quot;http://wpaudioplayer.com/wp-content/plugins/audio-player/assets/player.swf?ver=2.0.4.1&quot;, {</span>
</span><span class='line'><span class="c1">#     	transparentpagebg: &quot;yes&quot;,  </span>
</span><span class='line'><span class="c1">#         width: 290</span>
</span><span class='line'><span class="c1">#     });  </span>
</span><span class='line'><span class="c1"># &lt;/script&gt;  </span>
</span><span class='line'><span class="c1">#########################################################################################</span>
</span><span class='line'><span class="k">module</span> <span class="nn">Jekyll</span>
</span><span class='line'>	<span class="k">class</span> <span class="nc">AudioTag</span> <span class="o">&lt;</span> <span class="no">Liquid</span><span class="o">::</span><span class="no">Tag</span>
</span><span class='line'>		<span class="vi">@audio</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>		<span class="c1"># def initialize(tag_name, markup, tokens)</span>
</span><span class='line'>		<span class="c1"># 	if markup =~ /((https?:\/\/|\/)(\S+))(\s+(\d+)\s(\d+))?(\s+(https?:\/\/|\/)(\S+))?/i</span>
</span><span class='line'>		<span class="c1"># 		@file =$1</span>
</span><span class='line'>		<span class="c1"># 		@titles = $4</span>
</span><span class='line'>		<span class="c1"># 		@num = $5</span>
</span><span class='line'>		<span class="c1"># 		super</span>
</span><span class='line'>		<span class="c1"># 	end</span>
</span><span class='line'>		<span class="c1"># end</span>
</span><span class='line'>		<span class="no">ArtistsUrlTitle</span> <span class="o">=</span> <span class="sr">/(\S[\S\s]*)\s+(https?:\/\/)(\S+)\s+(.+)/i</span>
</span><span class='line'>	    <span class="no">ArtistsUrl</span> <span class="o">=</span> <span class="sr">/(\S[\S\s]*)\s+(https?:\/\/)(\S+)/i</span>
</span><span class='line'>	   	<span class="no">UrlTitle</span> <span class="o">=</span> <span class="sr">/((https?:\/\/)(\S+))\s+(.+)/i</span>
</span><span class='line'>	    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">tag_name</span><span class="p">,</span> <span class="n">markup</span><span class="p">,</span> <span class="n">tokens</span><span class="p">)</span>
</span><span class='line'>			<span class="vi">@file</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>			<span class="vi">@titles</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>			<span class="vi">@artists</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>			<span class="k">if</span> <span class="n">markup</span> <span class="o">=~</span> <span class="no">ArtistsUrlTitle</span>
</span><span class='line'>				<span class="vi">@file</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vg">$2</span> <span class="o">+</span> <span class="vg">$3</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>				<span class="vi">@titles</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vg">$4</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>				<span class="vi">@artists</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vg">$1</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>			<span class="k">elsif</span> <span class="n">markup</span> <span class="o">=~</span> <span class="no">ArtistsUrl</span>
</span><span class='line'>				<span class="vi">@file</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vg">$2</span> <span class="o">+</span> <span class="vg">$3</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>				<span class="vi">@artists</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vg">$1</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>			<span class="k">elsif</span> <span class="n">markup</span> <span class="o">=~</span> <span class="no">UrlTitle</span>
</span><span class='line'>				<span class="vi">@file</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vg">$1</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>				<span class="vi">@titles</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vg">$4</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>			<span class="k">else</span>
</span><span class='line'>				<span class="vi">@file</span> <span class="o">=</span> <span class="n">markup</span>
</span><span class='line'>				<span class="vi">@titles</span> <span class="o">=</span> <span class="s2">&quot;A nice Song&quot;</span>
</span><span class='line'>			<span class="k">end</span>	
</span><span class='line'>			<span class="k">super</span>
</span><span class='line'>	    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>		<span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>			<span class="n">output</span> <span class="o">=</span> <span class="k">super</span>
</span><span class='line'>			<span class="n">audio</span> <span class="o">=</span> <span class="sx">%Q{&lt;p id=&quot;audioplayer</span><span class="si">#{</span><span class="vi">@titles</span><span class="si">}</span><span class="sx">&quot;&gt;Alternative content&lt;/p&gt;}</span>
</span><span class='line'>			<span class="n">audio</span><span class="o">+=</span> <span class="sx">%Q{&lt;script type=&quot;text/javascript&quot;&gt;}</span>
</span><span class='line'>			<span class="n">audio</span><span class="o">+=</span> <span class="sx">%Q{AudioPlayer.embed(&quot;audioplayer</span><span class="si">#{</span><span class="vi">@titles</span><span class="si">}</span><span class="sx">&quot;, }</span>
</span><span class='line'>			<span class="n">audio</span><span class="o">+=</span> <span class="sx">%Q{{soundFile: &quot;</span><span class="si">#{</span><span class="vi">@file</span><span class="si">}</span><span class="sx">&quot;,titles:&quot;</span><span class="si">#{</span><span class="vi">@titles</span><span class="si">}</span><span class="sx">&quot;,artists:&quot;</span><span class="si">#{</span><span class="vi">@artists</span><span class="si">}</span><span class="sx">&quot;});&lt;/script&gt;}</span>
</span><span class='line'>		<span class="k">end</span>
</span><span class='line'>	<span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Liquid</span><span class="o">::</span><span class="no">Template</span><span class="o">.</span><span class="n">register_tag</span><span class="p">(</span><span class="s1">&#39;audio&#39;</span><span class="p">,</span> <span class="no">Jekyll</span><span class="o">::</span><span class="no">AudioTag</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>小小的在这里开心一下。哦，对了，旁边的这个日历是第三方的，挺赞，可惜不能把当天圈出来，主要是自己不会<code>javascript</code>,找时间学一学，把这个功能实现了。整个主题配色和纹理花了我不少精力，不过总体上挺满意的。~找老婆要奖励~。哦对了，还修了个网站的logo，实在不大会美工，能修成这样，已经很不错了。Mac上浏览器的两端对齐对得非常之整齐。如图：</p>

<p><img src="http://i.minus.com/ibgCxvyFvrJIxJ.png" width="400" height="211" title="mac下的两端对齐" ></p>

<p>可惜windows上对齐效果太差了，花了不少功夫，还是不对，<code>justify</code>一点用都没有。</p>

<p>对了，试了一下写iphone上的程序。还在真机上调试了，这里有个很好的教程<a href="http://blog.csdn.net/vrix/article/details/7851377">图文并茂 在ML OS X 10.8 + XCode4.4/4.4.1下实现无证书真机调试IOS5.1.1(亲测，附调试截图)</a>。这里是在工程中需要加入的脚本：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>真机调试ios_app (ios_dev_hack.sh)</span> <a href='/downloads/code/ios_dev_hack.sh'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#shell  /bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">CODESIGN_ALLOCATE</span><span class="o">=</span>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/codesign_allocate
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;${PLATFORM_NAME}&quot;</span> <span class="o">==</span> <span class="s2">&quot;iphoneos&quot;</span> <span class="o">]</span> <span class="o">||</span> <span class="o">[</span> <span class="s2">&quot;${PLATFORM_NAME}&quot;</span> <span class="o">==</span> <span class="s2">&quot;ipados&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'>
</span><span class='line'>/Applications/Xcode.app/Contents/Developer/iphoneentitlements/gen_entitlements.py <span class="s2">&quot;my.company.${PROJECT_NAME}&quot;</span> <span class="s2">&quot;${BUILT_PRODUCTS_DIR}/${WRAPPER_NAME}/${PROJECT_NAME}.xcent&quot;</span>;
</span><span class='line'>
</span><span class='line'>codesign -f -s <span class="s2">&quot;iPhone Developer&quot;</span> --entitlements <span class="s2">&quot;${BUILT_PRODUCTS_DIR}/${WRAPPER_NAME}/${PROJECT_NAME}.xcent&quot;</span> <span class="s2">&quot;${BUILT_PRODUCTS_DIR}/${WRAPPER_NAME}/&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
苹果真心挺好用，要打造自动话听话的，还要学写一些脚本。慢慢来吧。</p>

<p>最近还算是挺充实的，虽然实习的地方很忙，实验室也很忙，还想自己捣鼓写喜欢的技术。不过忙的都暂时还能应付的过来。还有很多想学想做的事情，慢慢来，等有时间，有机会，找点点精力出来一件一件的实现吧。这里还可以记一记： </p>

<ul>
  <li>学做菜    </li>
  <li>学溜冰    </li>
  <li>学单反，做摄影    </li>
  <li>学设计，美工，做动画，做视频，做音频    </li>
  <li>学吉他，敲架子鼓，冬、冬冬、冬、冬冬、卡~     </li>
  <li>做android和iphone上的app：想做一个editor，要类似sublimetext，实现在客户端写markdown，实现很多快捷的snippet写markdown然后在octopress上发布博文。    </li>
  <li>看一些书，买了两本书《浪潮之巅》、《技术元素》；有时间慢慢看，还想把《圣经》看了。。。    </li>
  <li>学<code>applescript</code>，方便使用mac    </li>
  <li>学<code>ruby</code>, <code>perl</code>, <code>php</code>    </li>
  <li>想去旅游，去西藏，去海边，有钱了去国外的各个名胜美景去旅游    </li>
  <li>想蹦极，想跳伞   </li>
  <li>想学烤蛋糕，做面包    </li>
  <li>想学打网球    </li>
  <li>想开间茶馆，或是咖啡馆，很温馨的那种，起名<code>弯排帆|vampirefan</code>    </li>
  <li>想做产品，像苹果这种；想做产业，像星级酒店，品牌集团那种；要做大，家喻户晓    </li>
  <li>想做游戏，大型的，辐射3、刺客信条、使命召唤、上古卷轴、马克思佩恩、洛城危机、古墓丽影这种，动画逼真，画面可玩性高。特别想把《搜神记》、《诛仙》、《长安乱》做成大型RPG游戏。   </li>
  <li>想灌篮，找个跳板铺在地上实现了也行   </li>
  <li>想跳街舞，那种很强节奏跳上蹦下的那种   </li>
  <li>。。。   </li>
</ul>

<p>还有好多，不过现在不现实，眼前的事也挺多，不过想法和愿望是应该一直有所期待的。机会总是在不经意间来的。喜欢周星驰的那句“人没有梦想，那和咸鱼有什么分别啊”。咸鱼，瞪着无神的眼睛，一动不动。</p>

<p>留着梦想，记下想法，未来总会有惊喜的。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 安装小记]]></title>
    <link href="http://vampirefan.github.com/blog/2012/07/04/octopress-an-zhuang-xiao-ji/"/>
    <updated>2012-07-04T23:46:00+08:00</updated>
    <id>http://vampirefan.github.com/blog/2012/07/04/octopress-an-zhuang-xiao-ji</id>
    <content type="html"><![CDATA[<h3 id="octopress">Octopress的感觉</h3>
<p>用起来还是不是很顺手，很多需要的功能不能实现，代码的插入高亮功能不像wordpress插件的效果那么令我满意。图像，视频，音乐的插入还要摸索。虽然搭建也很费力，但是没有sql，没有php，不用找免费的域名空间，本地和远程像svn一样的更新机制很令我满意。可配置性也很强，代码很容易读改，框架很简洁，很有程序的井井有条的感觉。可惜发博文没有UI，有点复杂，女友肯定不开心在这里发文章了，所以暂不打算把wordpress搬过来。在摸索一段时间，等这边的一切顺畅了，再做决定～</p>

<h3 id="octopress-1">Octopress的搭建</h3>
<!--more-->

<p>1.安装辅助工具：
Liquid error: ClassNotFound: no lexer for alias 'PowerShell' found 
2.安装rvm<br />
<a href="http://octopress.org/docs/setup/rvm/">参见官方文档</a>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bash -s stable &amp;lt; &amp;lt;<span class="o">(</span>curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer<span class="o">)</span>
</span><span class='line'><span class="nb">echo</span> ‘<span class="o">[[</span> -s “<span class="nv">$HOME</span>/.rvm/scripts/rvm” <span class="o">]]</span> &amp;amp;&amp;amp; . “<span class="nv">$HOME</span>/.rvm/scripts/rvm” <span class="c"># Load RVM function’ » ~/.bash_profile</span>
</span><span class='line'><span class="nb">source</span> ~/.bash_profile
</span></code></pre></td></tr></table></div></figure></notextile></div> 
3.安装所需的包<br />
<a href="http://blazing5.heroku.com/markdown/2012/04/04/octopressda-jian-xiang-jie-macosx-and-and-fedora">参考网址</a>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm pkg install zlib
</span><span class='line'>rvm –skip-autoreconf pkg install readline
</span><span class='line'>rvm pkg install openssl
</span></code></pre></td></tr></table></div></figure></notextile></div> 
4.安装ruby<br />
试了好久，最后还是使用1.9.3成功的和<code>heroku</code>搭配在一起使用，如果使用<code>github</code>则可以参看<code>octopress</code>官方安装文档的1.9.2的安装使用就能很好的使用。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm install 1.9.3 &amp;amp;&amp;amp; rvm use 1.9.3
</span></code></pre></td></tr></table></div></figure></notextile></div> 
<strong>注意：</strong>出现问题很可能ruby没有配置好，看一下有哪些包没装好，安装好那些包以后，再重新安装使用ruby。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm reinstall 1.9.3 &amp;amp;&amp;amp; rvm use 1.9.3
</span></code></pre></td></tr></table></div></figure></notextile></div> 
5.确认gem是最新的,以及确认ruby的版本
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm rubygems latest
</span><span class='line'>ruby –version
</span></code></pre></td></tr></table></div></figure></notextile></div> 
6.安装octopress或同步已有的octopress</p>

<ul>
  <li>安装octopress：<br />
<a href="http://octopress.org/docs/setup/">参见官方安装文档</a>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'><span class="nb">cd </span>octopress    <span class="c"># If you use RVM, You’ll be asked if you trust the .rvmrc file (say yes).</span>
</span></code></pre></td></tr></table></div></figure></notextile></div> </li>
  <li>同步已有的octopress：<br />
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone -b <span class="nb">source </span>git@github.com:username/username.github.com.git octopress
</span><span class='line'><span class="nb">cd </span>octopress
</span><span class='line'>git clone git@github.com:username/username.github.com.git _deploy
</span></code></pre></td></tr></table></div></figure></notextile></div> 
7.安装一些所需的依赖
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install bundler
</span><span class='line'>bundle install
</span><span class='line'>rake install
</span></code></pre></td></tr></table></div></figure></notextile></div> 
8.配置远程repository<br />
<strong>注意：</strong>没有配置过密钥的话先配置密钥：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh-keygen -t rsa -C “your_email@youremail.com”
</span></code></pre></td></tr></table></div></figure></notextile></div> </li>
  <li>github：<br />
a.安装密钥：
在<code>~/.ssh/</code>下面会看见一个叫<code>id_rsa.pub</code>的文件，用VIM或GEdit打开，把里面的东西拷到github网站里：<code>"Add another public key"</code>，都复制到那个框内。
b.关联远程repository
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake setup_github_pages
</span></code></pre></td></tr></table></div></figure></notextile></div> </li>
  <li>
    <p>heroku：<br />
a.安装密钥：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>heroku keys:add ~/.ssh/id_rsa.pub
</span></code></pre></td></tr></table></div></figure></notextile></div> 
b.关联远程repository   </p>
  </li>
  <li>建立新的站点（所谓的app）<br />
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>heroku create your_appname
</span><span class='line'>git config branch.master.remote heroku
</span></code></pre></td></tr></table></div></figure></notextile></div> </li>
  <li>使用已有的站点<br />
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git remote add heroku git@heroku.com:your_appname.git
</span></code></pre></td></tr></table></div></figure></notextile></div> 
<strong>提示：</strong>可以利用<code>git remote -v</code>查询已有的repository<br />
c.删除<code>.gitignore</code>中的<code>public</code>文件</li>
</ul>

<p>9.生成发布页面
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake generate
</span><span class='line'>git add .
</span><span class='line'>git commit -m ‘site updated’
</span></code></pre></td></tr></table></div></figure></notextile></div> 
* github：<br />
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git pull origin master
</span><span class='line'>rake deploy
</span></code></pre></td></tr></table></div></figure></notextile></div> 
* heroku：<br />
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>_deploy
</span><span class='line'>git pull heroku master
</span><span class='line'>git push heroku master
</span></code></pre></td></tr></table></div></figure></notextile></div> 
### Octopress的配置 ###
1. 首先配置文件:<code>./_config.yml</code><br />
<a href="http://octopress.org/docs/configuring/">参见官方文档</a></p>

<ol>
  <li>
    <p>页面布局文件夹:<code>./source/_includes/</code><br />
<a href="http://octopress.org/docs/theme/template/">参见官方文档</a></p>
  </li>
  <li>
    <p>页面css文件夹:<code>./sass/custom/</code><br />
<a href="http://octopress.org/docs/theme/styles/">参见官方文档</a></p>
  </li>
  <li>
    <p>博客文档存放文件夹:<code>./source/_posts</code></p>
  </li>
</ol>

<p>:-)，试试<code>markdown</code>语言，挺炫的～</p>
]]></content>
  </entry>
  
</feed>
